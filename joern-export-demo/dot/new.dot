digraph G {
31 [label="(METHOD,main)"];
32 [label="(BLOCK,{\n    pthread_t threads[2];  // 创建两个线程\n    int ...,{\n    pthread_t threads[2];  // 创建两个线程\n    int ...)"];
33 [label="(LOCAL,pthread_t[2] threads: pthread_t[2])"];
34 [label="(LOCAL,int[2] threadArgs: int[2])"];
35 [label="(CONTROL_STRUCTURE,FOR,for (int i = 0;i &lt; 2;i++)"];
36 [label="(BLOCK,&lt;empty&gt;,&lt;empty&gt;)"];
37 [label="(LOCAL,int i: int)"];
46 [label="(BLOCK,{\n        threadArgs[i] = i + 1;  // 为每个线程传递一个参...,{\n        threadArgs[i] = i + 1;  // 为每个线程传递一个参...)"];
54 [label="(CONTROL_STRUCTURE,IF,if (pthread_create(&amp;threads[i], NULL, threadFunction, &amp;threadArgs[i])"];
56 [label="(pthread_create,pthread_create(&amp;threads[i], NULL, threadFunctio...)"];
61 [label="(IDENTIFIER,NULL,pthread_create(&amp;threads[i], NULL, threadFunctio...)"];
62 [label="(METHOD_REF,threadFunction,pthread_create(&amp;threads[i], NULL, threadFunctio...)"];
68 [label="(BLOCK,{\n            perror(&quot;Failed to create thread&quot;)"];
69 [label="(perror,perror(&quot;Failed to create thread&quot;)"];
70 [label="(LITERAL,&quot;Failed to create thread&quot;,perror(&quot;Failed to create thread&quot;)"];
71 [label="(RETURN,return 1;,return 1;)"];
72 [label="(LITERAL,1,return 1;)"];
73 [label="(CONTROL_STRUCTURE,FOR,for (int i = 0;i &lt; 2;i++)"];
74 [label="(BLOCK,&lt;empty&gt;,&lt;empty&gt;)"];
75 [label="(LOCAL,int i: int)"];
84 [label="(BLOCK,{\n        if (pthread_join(threads[i], NULL)"];
85 [label="(CONTROL_STRUCTURE,IF,if (pthread_join(threads[i], NULL)"];
87 [label="(pthread_join,pthread_join(threads[i], NULL)"];
91 [label="(IDENTIFIER,NULL,pthread_join(threads[i], NULL)"];
93 [label="(BLOCK,{\n            perror(&quot;Failed to join thread&quot;)"];
94 [label="(perror,perror(&quot;Failed to join thread&quot;)"];
95 [label="(LITERAL,&quot;Failed to join thread&quot;,perror(&quot;Failed to join thread&quot;)"];
96 [label="(RETURN,return 1;,return 1;)"];
97 [label="(LITERAL,1,return 1;)"];
98 [label="(printf,printf(&quot;All threads are done!\n&quot;)"];
99 [label="(LITERAL,&quot;All threads are done!\n&quot;,printf(&quot;All threads are done!\n&quot;)"];
100 [label="(RETURN,return 0;,return 0;)"];
101 [label="(LITERAL,0,return 0;)"];
102 [label="(METHOD_RETURN,int)"];
14 [label="(METHOD,threadFunction)"];
15 [label="(PARAM,void* arg)"];
16 [label="(BLOCK,{\n    int threadNum = *(int*)"];
17 [label="(LOCAL,int threadNum: int)"];
22 [label="(UNKNOWN,int*,int*)"];
24 [label="(printf,printf(&quot;Hello from thread %d\n&quot;, threadNum)"];
25 [label="(LITERAL,&quot;Hello from thread %d\n&quot;,printf(&quot;Hello from thread %d\n&quot;, threadNum)"];
26 [label="(IDENTIFIER,threadNum,printf(&quot;Hello from thread %d\n&quot;, threadNum)"];
27 [label="(RETURN,return NULL;,return NULL;)"];
28 [label="(IDENTIFIER,NULL,return NULL;)"];
29 [label="(METHOD_RETURN,void*)"];
31 -> 32 [label="AST: "];
31 -> 102 [label="AST: "];
32 -> 33 [label="AST: "];
32 -> 34 [label="AST: "];
32 -> 35 [label="AST: "];
32 -> 73 [label="AST: "];
32 -> 98 [label="AST: "];
32 -> 100 [label="AST: "];
35 -> 36 [label="AST: "];
35 -> 46 [label="AST: "];
36 -> 37 [label="AST: "];
46 -> 54 [label="AST: "];
54 -> 68 [label="AST: "];
56 -> 61 [label="AST: "];
56 -> 62 [label="AST: "];
68 -> 69 [label="AST: "];
68 -> 71 [label="AST: "];
69 -> 70 [label="AST: "];
71 -> 72 [label="AST: "];
73 -> 74 [label="AST: "];
73 -> 84 [label="AST: "];
74 -> 75 [label="AST: "];
84 -> 85 [label="AST: "];
85 -> 93 [label="AST: "];
87 -> 91 [label="AST: "];
93 -> 94 [label="AST: "];
93 -> 96 [label="AST: "];
94 -> 95 [label="AST: "];
96 -> 97 [label="AST: "];
98 -> 99 [label="AST: "];
100 -> 101 [label="AST: "];
98 -> 100 [label="CFG: "];
100 -> 102 [label="CFG: "];
100 -> 102 [label="DDG: &lt;RET&gt;"];
69 -> 71 [label="CFG: "];
71 -> 102 [label="CFG: "];
71 -> 102 [label="DDG: &lt;RET&gt;"];
94 -> 96 [label="CFG: "];
96 -> 102 [label="CFG: "];
96 -> 102 [label="DDG: &lt;RET&gt;"];
56 -> 102 [label="DDG: &amp;threads[i]"];
56 -> 102 [label="DDG: NULL"];
56 -> 102 [label="DDG: &amp;threadArgs[i]"];
69 -> 102 [label="DDG: perror(&quot;Failed to create thread&quot;)"];
101 -> 100 [label="DDG: 0"];
31 -> 100 [label="DDG: "];
31 -> 98 [label="DDG: "];
31 -> 101 [label="DDG: "];
72 -> 71 [label="DDG: 1"];
31 -> 71 [label="DDG: "];
97 -> 96 [label="DDG: 1"];
31 -> 96 [label="DDG: "];
31 -> 56 [label="DDG: "];
31 -> 69 [label="DDG: "];
31 -> 72 [label="DDG: "];
56 -> 87 [label="DDG: &amp;threads[i]"];
56 -> 87 [label="DDG: NULL"];
31 -> 87 [label="DDG: "];
31 -> 94 [label="DDG: "];
31 -> 97 [label="DDG: "];
14 -> 15 [label="AST: "];
14 -> 15 [label="DDG: "];
14 -> 16 [label="AST: "];
14 -> 29 [label="AST: "];
16 -> 17 [label="AST: "];
16 -> 24 [label="AST: "];
16 -> 27 [label="AST: "];
24 -> 25 [label="AST: "];
24 -> 26 [label="AST: "];
27 -> 28 [label="AST: "];
24 -> 27 [label="CFG: "];
27 -> 29 [label="CFG: "];
27 -> 29 [label="DDG: &lt;RET&gt;"];
14 -> 22 [label="CFG: "];
24 -> 29 [label="DDG: threadNum"];
24 -> 29 [label="DDG: printf(&quot;Hello from thread %d\n&quot;, threadNum)"];
28 -> 27 [label="DDG: NULL"];
14 -> 27 [label="DDG: "];
14 -> 24 [label="DDG: "];
14 -> 28 [label="DDG: "];
54 -> 14 [label=SYNC];
29 -> 85 [label=SYNC];
}
